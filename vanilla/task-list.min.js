var c=`:host
{
    --border-color: rgb(95, 95, 95);
    display: inline-block;
    border: solid 1px var(--border-color);
    border-radius: 3px;
    padding: .5em;
}
@media (prefers-color-scheme: dark) 
{
    :host
    {
        --border-color: rgb(71, 71, 71);
    }
}


#header
{
    display: grid;
    grid-template-columns: auto minmax(0, 1fr) auto;
    align-items: center;
    position: sticky;
}

#color-container
{
    display: contents;
}

#color
{
    padding: 0;
    width: 12px;
    min-height: 0;
    height: auto;
    border: solid 1px transparent;
    align-self: stretch;
}
#color::-moz-color-swatch 
{
    border: none;
    padding: 0;
    margin: 0;
}

#color::-webkit-color-swatch-wrapper 
{
    padding: 0;
    margin: 0;
}

#color::-webkit-color-swatch 
{
    border: none;
    padding: 0;
    margin: 0;
}

#tasks
{
    list-style: none;
    margin: 0;
    padding: 0;
    display: flex;
    flex-direction: column;
}

#add-button
{
    margin-top: 1rem;
    margin-inline: auto;
    min-width: 100px;
    align-self: center;
    display: flex;
    align-items: center;
    justify-content: center;
    gap: 5px;
}

:host([collapsed]) > #tasks
{
    overflow: hidden;
    height: min-content;
    height: 0;
    opacity: 0;
    padding: 0;
    margin: 0;
    border: none;
    pointer-events: none;
    user-select: none;
}

::slotted([data-drag-id])
{
    opacity: .7;
    scale: .97;
    transition: opacity 100ms ease, scale 100ms ease;
}

::slotted(task-list)
{
    margin-block: 7px;
}`;var h=`<slot name="header">
    <header id="header">
        <label id="color-container" title="Color">
            <input type="color" id="color" class="input" value="#919191" />
        </label>
        <input type="text" id="name" class="input" placeholder="List Name" />
        <button type="button" id="collapse-button" class="button field-button" title="Collapse">
            <span id="collapse-icon" class="icon">\u25B2</span>
        </button>
    </header>
</slot>
<ul id="tasks">
    <slot></slot>
</ul>
<slot name="add-button">
<button type="button" id="add-button" class="button" title="Add">
    <span id="add-icon" class="icon">&plus;</span>
    <span id="add-label">Add Task</span>
</button>
</slot>
<slot name="footer"></slot>`;var p=new CSSStyleSheet;p.replaceSync(c);var u=(o=>(o.Change="change",o.Add="add",o.Added="added",o.Removed="removed",o.Nested="nested",o.Collapse="collapse",o))(u||{}),l="task-list",d=class extends HTMLElement{TASKCARD_TAG_NAME="task-card";dragAndDropQueryParent;parentScopeSelector="";componentParts=new Map;getElement(e){if(this.componentParts.get(e)==null){let t=this.findElement(e);t!=null&&this.componentParts.set(e,t)}return this.componentParts.get(e)}findElement(e){return this.shadowRoot.getElementById(e)}handledItems=new WeakSet;constructor(){super(),this.attachShadow({mode:"open"}),this.shadowRoot.innerHTML=h,this.shadowRoot.adoptedStyleSheets.push(p),this.dragAndDropQueryParent=this.parentElement==null?this.getRootNode():this.parentElement.getRootNode(),this.findElement("name").addEventListener("change",e=>{this.dispatchEvent(new CustomEvent("change",{bubbles:!0,cancelable:!0,detail:{target:e.target}}))}),this.findElement("color").addEventListener("change",e=>{this.dispatchEvent(new CustomEvent("change",{bubbles:!0,cancelable:!0,detail:{target:e.target}}))}),this.findElement("collapse-button").addEventListener("click",()=>{this.toggleHidden()}),this.findElement("add-button").addEventListener("click",()=>{let e=this.querySelectorAll(`:scope > ${this.TASKCARD_TAG_NAME}`).length;this.dispatchEvent(new CustomEvent("add",{bubbles:!0,cancelable:!0,detail:{order:e}}))}),this.getAttribute("drag-drop")!=null&&this.#t(),this.shadowRoot.querySelector("slot:not([name])").addEventListener("slotchange",e=>{let t=e.target.assignedElements();for(let n=0;n<t.length;n++)this.handledItems.has(t[n])||(t[n].tagName.toLowerCase()==l.toLowerCase()&&(this.dispatchEvent(new CustomEvent("nested",{bubbles:!0,cancelable:!0,detail:{target:t[n]}})),this.handledItems.add(t[n])),t[n].tagName.toLowerCase()==this.TASKCARD_TAG_NAME.toLowerCase()&&t[n].dataset.dragId==null&&(this.handledItems.add(t[n]),this.getAttribute("drag-drop")!=null&&this.applyDragAndDropCardHandler(t[n])))}),this.#n()}#n(){let e=[...this.shadowRoot.querySelectorAll("[id]")];for(let n=0;n<e.length;n++)e[n].part.add(e[n].id);let t=[...this.shadowRoot.querySelectorAll("[class]")];for(let n=0;n<t.length;n++)t[n].part.add(...t[n].classList)}toggleHidden(){this.getAttribute("collapsed")==null?this.hide():this.show()}hide(){this.findElement("collapse-icon").textContent="\u25BC",this.setAttribute("collapsed",""),this.dispatchEvent(new CustomEvent("collapse",{bubbles:!0,cancelable:!0}))}show(){this.findElement("collapse-icon").textContent="\u25B2",this.removeAttribute("collapsed"),this.dispatchEvent(new CustomEvent("collapse",{bubbles:!0,cancelable:!0}))}static observedAttributes=["name","description","color","collapsed","drag-drop"];attributeChangedCallback(e,t,n){e=="name"?this.findElement("name").value=n:e=="description"?this.findElement("header").title=n:e=="color"?this.findElement("color").value=n:e=="collapsed"?n==="true"?this.classList.add("collapsed"):this.classList.remove("collapsed"):e=="drag-drop"&&t==null&&this.#t()}#t(){this.addEventListener("dragover",e=>{e.preventDefault(),e.stopPropagation(),e.dataTransfer.effectAllowed="move";let n=[...this.querySelectorAll(`:scope > ${this.TASKCARD_TAG_NAME}:not([data-drag-id])`)].reduce((a,o)=>{let r=o.getBoundingClientRect(),i=e.clientY-r.top-r.height/2;return i<0&&i>a.offset?{offset:i,task:o}:a},{offset:Number.NEGATIVE_INFINITY,task:void 0}).task,s=this.dragAndDropQueryParent.querySelector(`${this.parentScopeSelector}${this.TASKCARD_TAG_NAME}[data-drag-id]`);s==null||s.parentElement==this&&n==s.nextElementSibling||(n==null||this.getAttribute("collapsed")!=null?this.append(s):this.insertBefore(s,n))}),this.addEventListener("drop",e=>(e.preventDefault(),e.stopPropagation(),!1))}applyDragAndDropCardHandler(e){e.setAttribute("draggable","true"),e.addEventListener("dragstart",this.#e.item_onDragStart),e.addEventListener("dragend",this.#e.item_onDragEnd)}#s(e){let t=e.currentTarget,n=this.#a(),a=[...this.querySelectorAll(`:scope > ${this.TASKCARD_TAG_NAME}`)].indexOf(t);t.dataset.dragId=n,t.dataset.order=a.toString(),t.dataset.listIndex=[...this.parentElement.children].indexOf(this).toString()}#a(){return Math.floor(Math.random()*1e3).toString()}#o(e){e.preventDefault(),e.stopPropagation();let t=e.currentTarget,n=parseInt(t.dataset.order??""),s=this.parentElement.children[parseInt(t.dataset.listIndex)],a=t.parentElement,r=[...a.querySelectorAll(`:scope > ${this.TASKCARD_TAG_NAME}`)].indexOf(t);s!=a?(a.applyDragAndDropCardHandler(t),a.handledItems.add(t),a.dispatchEvent(new CustomEvent("added",{bubbles:!0,detail:{order:r,target:t}})),t.removeEventListener("dragstart",s.#e.item_onDragStart),t.removeEventListener("dragend",s.#e.item_onDragEnd),s.handledItems.delete(t),s.dispatchEvent(new CustomEvent("removed",{bubbles:!0,detail:{order:n,target:t}}))):a.dispatchEvent(new CustomEvent("change",{bubbles:!0,detail:{order:r,previousOrder:n,target:t}})),delete t.dataset.dragId,delete t.dataset.order,delete t.previousParent}#e={item_onDragStart:this.#s.bind(this),item_onDragEnd:this.#o.bind(this)}};customElements.get(l)==null&&customElements.define(l,d);export{l as COMPONENT_TAG_NAME,d as TaskListElement,u as TaskListEvents};
