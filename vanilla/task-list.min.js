var c=`:host
{
    --border-color: rgb(95, 95, 95);
    display: inline-block;
    border: solid 1px var(--border-color);
    border-radius: 3px;
    padding: .5em;
}
@media (prefers-color-scheme: dark) 
{
    :host
    {
        --border-color: rgb(71, 71, 71);
    }
}


[part="header"]
{
    display: grid;
    grid-template-columns: auto minmax(0, 1fr) auto;
    align-items: center;
    position: sticky;
}

[part="color-container"]
{
    display: contents;
}

[part="color"]
{
    padding: 0;
    width: 12px;
    min-height: 0;
    height: auto;
    border: solid 1px transparent;
    align-self: stretch;
}
[part="color"]::-moz-color-swatch 
{
    border: none;
    padding: 0;
    margin: 0;
}

[part="color"]::-webkit-color-swatch-wrapper 
{
    padding: 0;
    margin: 0;
}

[part="color"]::-webkit-color-swatch 
{
    border: none;
    padding: 0;
    margin: 0;
}

[part="tasks"]
{
    list-style: none;
    margin: 0;
    padding: 0;
    display: flex;
    flex-direction: column;
}

[part="add-button"]
{
    margin-top: 1rem;
    margin-inline: auto;
    min-width: 100px;
    align-self: center;
    display: flex;
    align-items: center;
    justify-content: center;
    gap: 5px;
}
[part="add-button"]:hover
{
    /* !important to override non-hover styles; hover-styles will need to be marked imporant */
    background: var(--button-highlight-background) !important;
    color: var(--button-highlight-text) !important;
    border: var(--button-highlight-border) !important;
    --icon-primary-color: var(--icon-highlight-primary-color) !important;
    --icon-secondary-color: var(--icon-highlight-secondary-color) !important;
}

:host([collapsed]) > [part="tasks"]
{
    overflow: hidden;
    height: min-content;
    height: 0;
    opacity: 0;
    padding: 0;
    margin: 0;
    border: none;
    pointer-events: none;
    user-select: none;
}

::slotted([data-drag-id])
{
    opacity: .7;
    scale: .97;
    transition: opacity 100ms ease, scale 100ms ease;
}

::slotted(task-list)
{
    margin-block: 7px;
}`;var p=`<slot name="header">
    <header part="header">
        <label part="color-container" title="Color">
            <input type="color" part="color" value="#919191" />
        </label>
        <input type="text" part="name" placeholder="List Name" />
        <button type="button" part="collapse-button" title="Collapse">
            <span part="collapse-icon">\u25B2</span>
        </button>
    </header>
</slot>
<ul part="tasks">
    <slot></slot>
</ul>
<slot name="add-button"><button type="button" part="add-button" title="Add">
    <span part="add-icon">&plus;</span>
    <span part="add-label">Add Task</span>
</button></slot>
<slot name="footer"></slot>`;var h=new CSSStyleSheet;h.replaceSync(c);var m=(s=>(s.Change="change",s.Add="add",s.Added="added",s.Removed="removed",s.Nested="nested",s.Collapse="collapse",s))(m||{}),d="task-list",l=class extends HTMLElement{TASKCARD_TAG_NAME="task-card";dragAndDropQueryParent;parentScopeSelector="";componentParts=new Map;getPart(t){if(this.componentParts.get(t)==null){let e=this.shadowRoot.querySelector(`[part="${t}"]`);e!=null&&this.componentParts.set(t,e)}return this.componentParts.get(t)}findPart(t){return this.shadowRoot.querySelector(`[part="${t}"]`)}handledItems=new WeakSet;constructor(){super(),this.attachShadow({mode:"open"}),this.shadowRoot.innerHTML=p,this.shadowRoot.adoptedStyleSheets.push(h),this.dragAndDropQueryParent=this.parentElement==null?this.getRootNode():this.parentElement.getRootNode(),this.findPart("name").addEventListener("change",t=>{this.dispatchEvent(new CustomEvent("change",{bubbles:!0,cancelable:!0,detail:{target:t.target}}))}),this.findPart("color").addEventListener("change",t=>{this.dispatchEvent(new CustomEvent("change",{bubbles:!0,cancelable:!0,detail:{target:t.target}}))}),this.findPart("collapse-button").addEventListener("click",()=>{this.toggleHidden()}),this.findPart("add-button").addEventListener("click",()=>{let t=this.querySelectorAll(`:scope > ${this.TASKCARD_TAG_NAME}`).length;this.dispatchEvent(new CustomEvent("add",{bubbles:!0,cancelable:!0,detail:{order:t}}))}),this.getAttribute("drag-drop")!=null&&this.#e(),this.shadowRoot.querySelector("slot:not([name])").addEventListener("slotchange",t=>{let e=t.target.assignedElements();for(let n=0;n<e.length;n++)this.handledItems.has(e[n])||(e[n].tagName.toLowerCase()==d.toLowerCase()&&(this.dispatchEvent(new CustomEvent("nested",{bubbles:!0,cancelable:!0,detail:{target:e[n]}})),this.handledItems.add(e[n])),e[n].tagName.toLowerCase()==this.TASKCARD_TAG_NAME.toLowerCase()&&e[n].dataset.dragId==null&&(this.handledItems.add(e[n]),this.getAttribute("drag-drop")!=null&&this.applyDragAndDropCardHandler(e[n])))})}toggleHidden(){this.getAttribute("collapsed")==null?this.hide():this.show()}hide(){this.findPart("collapse-icon").textContent="\u25BC",this.setAttribute("collapsed",""),this.dispatchEvent(new CustomEvent("collapse",{bubbles:!0,cancelable:!0}))}show(){this.findPart("collapse-icon").textContent="\u25B2",this.removeAttribute("collapsed"),this.dispatchEvent(new CustomEvent("collapse",{bubbles:!0,cancelable:!0}))}static observedAttributes=["name","description","color","collapsed","drag-drop"];attributeChangedCallback(t,e,n){t=="name"?this.findPart("name").value=n:t=="description"?this.findPart("header").title=n:t=="color"?this.findPart("color").value=n:t=="collapsed"?n==="true"?this.classList.add("collapsed"):this.classList.remove("collapsed"):t=="drag-drop"&&e==null&&this.#e()}#e(){this.addEventListener("dragover",t=>{t.preventDefault(),t.stopPropagation(),t.dataTransfer.effectAllowed="move";let n=[...this.querySelectorAll(`:scope > ${this.TASKCARD_TAG_NAME}:not([data-drag-id])`)].reduce((r,s)=>{let o=s.getBoundingClientRect(),i=t.clientY-o.top-o.height/2;return i<0&&i>r.offset?{offset:i,task:s}:r},{offset:Number.NEGATIVE_INFINITY,task:void 0}).task,a=this.dragAndDropQueryParent.querySelector(`${this.parentScopeSelector}${this.TASKCARD_TAG_NAME}[data-drag-id]`);a==null||a.parentElement==this&&n==a.nextElementSibling||(n==null||this.getAttribute("collapsed")!=null?this.append(a):this.insertBefore(a,n))}),this.addEventListener("drop",t=>(t.preventDefault(),t.stopPropagation(),!1))}applyDragAndDropCardHandler(t){t.setAttribute("draggable","true"),t.addEventListener("dragstart",this.#t.item_onDragStart),t.addEventListener("dragend",this.#t.item_onDragEnd)}#n(t){let e=t.currentTarget,n=this.#a(),r=[...this.querySelectorAll(`:scope > ${this.TASKCARD_TAG_NAME}`)].indexOf(e);e.dataset.dragId=n,e.dataset.order=r.toString(),e.dataset.listIndex=[...this.parentElement.children].indexOf(this).toString()}#a(){return Math.floor(Math.random()*1e3).toString()}#r(t){t.preventDefault(),t.stopPropagation();let e=t.currentTarget,n=parseInt(e.dataset.order??""),a=this.parentElement.children[parseInt(e.dataset.listIndex)],r=e.parentElement,o=[...r.querySelectorAll(`:scope > ${this.TASKCARD_TAG_NAME}`)].indexOf(e);a!=r?(r.applyDragAndDropCardHandler(e),r.handledItems.add(e),r.dispatchEvent(new CustomEvent("added",{bubbles:!0,detail:{order:o,target:e}})),e.removeEventListener("dragstart",a.#t.item_onDragStart),e.removeEventListener("dragend",a.#t.item_onDragEnd),a.handledItems.delete(e),a.dispatchEvent(new CustomEvent("removed",{bubbles:!0,detail:{order:n,target:e}}))):r.dispatchEvent(new CustomEvent("change",{bubbles:!0,detail:{order:o,previousOrder:n,target:e}})),delete e.dataset.dragId,delete e.dataset.order,delete e.previousParent}#t={item_onDragStart:this.#n.bind(this),item_onDragEnd:this.#r.bind(this)}};customElements.get(d)==null&&customElements.define(d,l);export{d as COMPONENT_TAG_NAME,l as TaskListElement,m as TaskListEvents};
