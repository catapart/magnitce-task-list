var l=`:host
{
    --border-color: rgb(95, 95, 95);
    border: solid 1px var(--border-color);
    border-radius: 3px;
    padding: 0;
    margin: .25em;
    display: inline-flex;
}
@media (prefers-color-scheme: dark) 
{
    :host
    {
        --border-color: rgb(71, 71, 71);
    }
}

#color-container
{
    display: contents;
}

#color
{
    margin: 0;
    padding: 0;
    width: 7.5px;
    min-height: 0;
    height: auto;
    border: none;
}
#color::-moz-color-swatch 
{
    border: none;
    padding: 0;
    margin: 0;
}

#color::-webkit-color-swatch-wrapper 
{
    padding: 0;
    margin: 0;
}

#color::-webkit-color-swatch 
{
    border: none;
    padding: 0;
    margin: 0;
}

#is-finished
{
    margin: 1em .5em;
}

:host(.custom-checkbox) #is-finished
{
    display: none;
}

#finished-indicator
{
    margin-block: var(--margin-block, var(--margin, .5em));
    margin-inline: var(--margin-inline, var(--margin, .5em));
    background: var(--background);
    background-color: var(--background-color, field);
    background-image: var(--background-image, none);
    border: var(--border, solid 1px fieldtext);
    color: var(--color);
    min-width: 13px;
    min-height: 13px;
    border-radius: 3px;
    padding: 1px 2px;
    box-sizing: border-box;
}
:host(:not(.custom-checkbox)) #finished-indicator
{
    display: none;
}


#is-finished:checked ~ slot #description
,#is-finished:checked ~ ::slotted([slot="description"])
{
    text-decoration: line-through;
}

::slotted([slot="custom-check"])
{
    visibility: hidden;
}
#is-finished:checked ~ #finished-indicator
{
    background: var(--finished-background);
    background-color: var(--finished-background-color, transparent);
    background-image: var(--finished-background-image, none);
    border: var(--finished-border, solid 1px fieldtext);
    color: var(--finished-color);
}
#is-finished:checked ~ #finished-indicator ::slotted([slot="custom-check"])
{
    visibility: var(--custom-check-visibility, visible);
    display: var(--custom-check-display, block);
}

#description
{
    /* user-agent input defaults */
    --input-border-color: rgb(118, 118, 118);

    min-height: 1.2em;
    min-width: 24px;
    resize: both;
    background-color: field;
    color: fieldtext;
    border: solid 1px var(--input-border-color, fieldtext);
    padding: 3px 15px 3px 5px;
    font-size: 12px;
    font-family: sans-serif;
    display: block;
    border-radius: 2px;
    overflow: auto;
    overflow-wrap: normal;

}
@media (prefers-color-scheme: dark) 
{
    :host
    {
        /* user-agent input defaults */
        --input-border-color: rgb(133, 133, 133);
    }
}

#description
,::slotted([slot="description"])
{
    margin: 1em .5em 1em 0;
    flex: 1;
}

#remove-button
{
    display: inline-flex;
    align-items: center;
    justify-content: center;
    margin:1em .5em 1em 0;
}
#remove-icon
{
    width: var(--icon-width, var(--icon-size, 12px));
    height: var(--icon-height, var(--icon-size, 12px));
}


:host(.stacked)
{
    display: grid;
    grid-template-columns: auto auto 1fr auto;
    grid-template-rows: auto 1fr;
}

:host(.stacked) #color-container
,:host(.stacked) #color
{
    grid-row: 2;
    grid-column: 2;
    width: 14px;
    height: 14px;
    margin-block-end: 7px;
    margin-block-start: 0;
    border-radius: 3px;
    align-self: center;
    justify-self: center;
}

:host(.stacked) #handle
{
    grid-row: span 2;
    grid-column: 1;
}

:host(.stacked) #is-finished
{
    grid-row: 1;
    grid-column: 2;
    margin-block-start: 7px;
    margin-block-end: 0;
}

:host(.stacked) #description
,:host(.stacked) #remove-button
{
    grid-row: span 2;
}`;var d=`<slot name="handle">
    <span id="handle"></span>
</slot>
<label id="color-container">
    <input type="color" id="color" class="input" value="#919191" />
</label>
<input type="checkbox" id="is-finished" class="input checkbox" title="Finished?" />
<label id="finished-indicator" for="is-finished">
    <slot id="custom-check" name="custom-check"></slot>
</label>
<slot name="description"><div id="description" contenteditable="true"></div></slot>
<button type="button" id="remove-button" class="button" title="Delete">
    <slot name="remove-button-label">
        <svg id="remove-icon" class="icon close-cross" viewBox="0 0 22.812714 22.814663" version="1.1" xmlns="http://www.w3.org/2000/svg" xmlns:svg="http://www.w3.org/2000/svg">
            <path
            style="display:inline;fill:var(--icon-primary-color,InfoText);fill-opacity:1;stroke:var(--icon-secondary-color,InfoBackground);stroke-width:1;stroke-linecap:round;stroke-dasharray:none;stroke-opacity:1"
            d="m 3.8656768,2.2287478 a 1.6392814,1.6392814 0 0 0 -1.15929,0.48032 1.6392814,1.6392814 0 0 0 0,2.31816 l 6.38181,6.3818002 -6.38181,6.38182 a 1.6392814,1.6392814 0 0 0 0,2.31814 1.6392814,1.6392814 0 0 0 2.31816,0 l 6.3818102,-6.3818 6.38181,6.3818 a 1.6392814,1.6392814 0 0 0 2.31816,0 1.6392814,1.6392814 0 0 0 0,-2.31814 l -6.38182,-6.38182 6.38182,-6.3818002 a 1.6392814,1.6392814 0 0 0 0,-2.31816 1.6392814,1.6392814 0 0 0 -1.15929,-0.48032 1.6392814,1.6392814 0 0 0 -1.15887,0.48032 l -6.38181,6.38181 -6.3818102,-6.38181 a 1.6392814,1.6392814 0 0 0 -1.15887,-0.48032 z" />
        </svg>
    </slot>
</button>`;var u=(i=>(i.Change="change",i.Remove="remove",i))(u||{}),p=(o=>(o.Handle="handle",o.ColorLabel="color-label",o.Color="color",o.IsFinished="is-finished",o.Description="description",o.RemoveButton="remove-button",o.RemoveIcon="remove-icon",o))(p||{}),c=new CSSStyleSheet;c.replaceSync(l);var n="task-card",s=class extends HTMLElement{componentParts=new Map;getElement(e){if(this.componentParts.get(e)==null){let i=this.findElement(e);i!=null&&this.componentParts.set(e,i)}return this.componentParts.get(e)}findElement(e){return this.shadowRoot.getElementById(e)}get value(){return this.findElement("description").textContent}#t=null;constructor(){super(),this.attachShadow({mode:"open"}),this.shadowRoot.innerHTML=d,this.shadowRoot.adoptedStyleSheets.push(c),this.findElement("custom-check").addEventListener("slotchange",e=>{let i=e.target.assignedNodes()[0];this.classList.toggle("custom-checkbox",i!=null)}),this.findElement("color").addEventListener("change",e=>{this.dispatchEvent(new CustomEvent("change",{bubbles:!0,cancelable:!0,composed:!0,detail:this.#e("color")}))}),this.findElement("is-finished").addEventListener("change",e=>{this.dispatchEvent(new CustomEvent("change",{bubbles:!0,cancelable:!0,composed:!0,detail:this.#e("is-finished")}))}),this.findElement("description").addEventListener("blur",e=>{this.value!=this.#t&&this.dispatchEvent(new CustomEvent("change",{bubbles:!0,cancelable:!0,composed:!0,detail:this.#e("description")})),this.#t=this.value}),this.findElement("remove-button").addEventListener("click",e=>{this.dispatchEvent(new CustomEvent("remove",{bubbles:!0,cancelable:!0,composed:!0}))}),this.#i()}#i(){let e=[...this.shadowRoot.querySelectorAll("[id]")];for(let t=0;t<e.length;t++)e[t].part.add(e[t].id);let i=[...this.shadowRoot.querySelectorAll("[class]")];for(let t=0;t<i.length;t++)i[t].part.add(...i[t].classList)}#e(e){return{currentUpdate:e,color:this.findElement("color").value,isFinished:this.findElement("is-finished").checked,description:this.findElement("description").textContent}}static create(e){let i=document.createElement(n);if(e==null)return i;for(let[t,r]of Object.entries(e))if(t=="value"||t=="placeholder"||t=="color")i.setAttribute(t,r);else if(t.startsWith("on")){let a=t.substring(2).toLowerCase();i.addEventListener(a,r)}return i}static observedAttributes=["value","description","color","is-finished"];attributeChangedCallback(e,i,t){e=="value"||e=="description"?this.findElement("description").textContent=t:e=="is-finished"?this.findElement("is-finished").checked=t=="true":e=="color"&&(this.findElement("color").value=t)}};customElements.get(n)==null&&customElements.define(n,s);export{n as COMPONENT_TAG_NAME,s as TaskCardElement,u as TaskCardEvent,p as TaskCardPart};
